// Mocks generated by Mockito 5.4.4 from annotations
// in tasktimetracker/test/features/task_management/domain/usecase/get_tasks_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasktimetracker/core/error/failures.dart' as _i7;
import 'package:tasktimetracker/features/task_management/domain/entities/task.dart'
    as _i5;
import 'package:tasktimetracker/features/task_management/domain/repositories/todoist_local_repository.dart'
    as _i3;
import 'package:tasktimetracker/features/task_management/domain/repositories/todoist_remote_repository.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoistLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoistLocalRepository extends _i1.Mock
    implements _i3.TodoistLocalRepository {
  MockTodoistLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addTask(_i5.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i5.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.TaskEntity?> getTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i5.TaskEntity?>.value(),
      ) as _i4.Future<_i5.TaskEntity?>);

  @override
  _i4.Future<List<_i5.TaskEntity>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskEntity>>.value(<_i5.TaskEntity>[]),
      ) as _i4.Future<List<_i5.TaskEntity>>);
}

/// A class which mocks [TodoistRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoistRemoteRepository extends _i1.Mock
    implements _i6.TodoistRemoteRepository {
  MockTodoistRemoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, List<_i5.TaskEntity>>> getTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i7.Failure, List<_i5.TaskEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i5.TaskEntity>>(
          this,
          Invocation.method(
            #getTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, List<_i5.TaskEntity>>>);

  @override
  _i4.Future<_i2.Either<_i7.Failure, _i5.TaskEntity>> createTask(
          _i5.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i5.TaskEntity>>.value(
            _FakeEither_0<_i7.Failure, _i5.TaskEntity>(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i5.TaskEntity>>);

  @override
  _i4.Future<_i2.Either<_i7.Failure, void>> deleteTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i7.Failure, _i5.TaskEntity>> updateTask(
          _i5.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i5.TaskEntity>>.value(
            _FakeEither_0<_i7.Failure, _i5.TaskEntity>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i5.TaskEntity>>);
}
